dnl
dnl $Id$
dnl
dnl Copyright (c) 2003, Kalopa Media Limited.  All rights reserved.
dnl
dnl This is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl
dnl It is distributed in the hope that it will be useful, but WITHOUT
dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
dnl or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
dnl License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this product; see the file COPYING.  If not, write to
dnl the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,
dnl USA.
dnl
dnl THIS SOFTWARE IS PROVIDED BY KALOPA MEDIA LIMITED "AS IS" AND ANY
dnl EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
dnl IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL KALOPA MEDIA LIMITED BE
dnl LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
dnl OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
dnl OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
dnl OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
dnl
dnl ABSTRACT
dnl
dnl $Log$
dnl Revision 1.2  2003/10/14 14:10:56  dtynan
dnl Some fixes for SQL and C, as well as 'dnl' lines in the M4 templates to
dnl reduce blank lines in the output.
dnl
dnl Revision 1.1  2003/10/14 13:00:24  dtynan
dnl Major revision of the DBOW code to use M4 as a back-end instead of
dnl hard-coding the output.
dnl
define(`EXCLUDE_INC_PROLOG',`#ifndef INCLUDE_$1
#define INCLUDE_$1')dnl
define(`EXCLUDE_INC_EPILOG',`#endif /* INCLUDE_$1 */')dnl
define(`LSYNC',`#line $1 "$2"')dnl
define(`M4FILE',`c.m4')dnl
define(`INCLUDE',`
#include "$1"')dnl
define(`FILE_PROLOG',`define(`FILENAME',`$1')dnl
/*
 * C/C++ prolog file - the following information was generated by
 * DBOW, the database object generator.  Do not edit the contents
 * of this file but instead the source file from which it was
 * generated.  Changes to this file will be lost.
 *
 * Source is "FILENAME"
 * Template is "$Id$"
 */
INCLUDE(`dbow.h')')
define(`FILE_EPILOG',`
')dnl
dnl
define(`STYPE_UNSIGNED',	`unsigned')dnl
define(`STYPE_TINYINT',		`short	$1')dnl
define(`STYPE_SMALLINT',	`short	$1')dnl
define(`STYPE_MEDINT',		`int	$1')dnl
define(`STYPE_INT',		`int	$1')dnl
define(`STYPE_BIGINT',		`long	$1')dnl
define(`STYPE_FLOAT',		`float	$1')dnl
define(`STYPE_DOUBLE',		`double	$1')dnl
define(`STYPE_NUMERIC',		`char	*$1')dnl
define(`STYPE_DATE',		`int	$1')dnl
define(`STYPE_TIME',		`int	$1')dnl
define(`STYPE_DATETIME',	`int	$1')dnl
define(`STYPE_TSTAMP',		`int	$1')dnl
define(`STYPE_YEAR',		`int	$1')dnl
define(`STYPE_CHAR',		`char	*$1')dnl
define(`STYPE_VARCHAR',		`char	*$1')dnl
define(`STYPE_TINYBLOB',	`char	*$1')dnl
define(`STYPE_TINYTEXT',	`char	*$1')dnl
define(`STYPE_BLOB',		`char	*$1')dnl
define(`STYPE_TEXT',		`char	*$1')dnl
define(`STYPE_MEDBLOB',		`char	*$1')dnl
define(`STYPE_MEDTEXT',		`char	*$1')dnl
define(`STYPE_LONGBLOB',	`char	*$1')dnl
define(`STYPE_LONGTEXT',	`char	*$1')dnl
define(`STYPE_ENUM',		`<error>')dnl
define(`STYPE_SET',		`<error>')dnl
dnl
define(`FTYPE_TINYINT',		`short')dnl
define(`FTYPE_SMALLINT',	`short')dnl
define(`FTYPE_MEDINT',		`int')dnl
define(`FTYPE_INT',		`int')dnl
define(`FTYPE_BIGINT',		`long')dnl
define(`FTYPE_FLOAT',		`float')dnl
define(`FTYPE_DOUBLE',		`double')dnl
define(`FTYPE_NUMERIC',		`dchar')dnl
define(`FTYPE_DATE',		`date')dnl
define(`FTYPE_TIME',		`date')dnl
define(`FTYPE_DATETIME',	`date')dnl
define(`FTYPE_TSTAMP',		`date')dnl
define(`FTYPE_YEAR',		`int')dnl
define(`FTYPE_CHAR',		`char')dnl
define(`FTYPE_VARCHAR',		`char')dnl
define(`FTYPE_TINYBLOB',	`char')dnl
define(`FTYPE_TINYTEXT',	`char')dnl
define(`FTYPE_BLOB',		`char')dnl
define(`FTYPE_TEXT',		`char')dnl
define(`FTYPE_MEDBLOB',		`char')dnl
define(`FTYPE_MEDTEXT',		`char')dnl
define(`FTYPE_LONGBLOB',	`char')dnl
define(`FTYPE_LONGTEXT',	`char')dnl
define(`FTYPE_ENUM',		`<error>')dnl
define(`FTYPE_SET',		`<error>')dnl
dnl
define(`STR_PROLOG',`
/*
 * Structure definition for SQL table "$1".
 */
struct db_$1 {
	dbow_res *resp;')dnl
define(`STR_ELEMENT',`	$1;')dnl
define(`STR_UELEMENT',`	unsigned $1;')dnl
define(`STR_EPILOG',`};')dnl
dnl
define(`PROTO_PROLOG',`
/*
 * Prototypes
 */
struct db_$1 *db_$1alloc();
void db_$1free(struct db_$1 *);
struct db_$1 *db_find$1next(struct db_$1 *);
')dnl
define(`PROTO_INSERT',`int $2(dbow_conn *, struct db_$1 *);')dnl
define(`PROTO_DELETE',`int $2(dbow_conn *, $3);')dnl
define(`PROTO_SEARCH',`struct db_$1 *$2(dbow_conn *, $3);')dnl
define(`PROTO_UPDATE',`int $2(dbow_conn *, struct db_$1 *, $3);')dnl
define(`PROTO_DUMP',`void $2(struct db_$1 *, FILE *);')dnl
define(`PROTO_EPILOG',`')dnl
dnl
define(`FILL_PROLOG',`
static void
_dbfill_$1(dbow_row row, struct db_$1 *p)
{')dnl
define(`FILL_ELEMENT',`	dbow_f$2(&p->$1, row, $3);')dnl
define(`FILL_EPILOG',`}')dnl
dnl
define(`ALLOC_PROLOG',`
struct db_$1 *
db_$1alloc()
{
	struct db_$1 *p;

	if ((p = (struct db_$1 *)dbow_alloc(sizeof(struct db_$1))) == NULL)
		return(NULL);
	memset((char *)p, 0, sizeof(struct db_$1));
	return(p);')dnl
define(`ALLOC_ELEMENT',`')dnl
define(`ALLOC_EPILOG',`}')dnl
dnl
define(`FREE_PROLOG',`
void
db_$1free(struct db_$1 *p)
{
	if (p->resp != NULL)
		dbow_free_result(p->resp);')dnl
define(`FREE_ELEMENT',`	dbow_free$2(p->$1);')dnl
define(`FREE_EPILOG',`	dbow_free((char *)p);dnl
}')dnl
dnl
define(`INSERT_PROLOG',`
int
$2(dbow_conn *c, struct db_$1 *p)
{
	char q[1024];
	MYSQL_RES *rsp;

	strcpy(q, "INSERT INTO $1 VALUES(");')dnl
define(`INSERT_ELEMENT',`	if (dbow_i$2(DBOW_INSERT,q,p->$1,sizeof(q)) < 0)
		return(-1);')dnl
define(`INSERT_ACTION',`	if (dbow_query(c,q) != 0)
		return(-1);')dnl
define(`INSERT_SETID',`	if (p->$1 == 0)
		p->$1 = dbow_insertid(c);')dnl
define(`INSERT_EPILOG',`	return(0);
}')dnl
dnl
define(`DELETE_PROLOG',`
int
$2(dbow_conn *c, $3)
{
	char q[100];
	dbow_row row;

	strcpy(q, "DELETE FROM $1 WHERE ");
')dnl
define(`DELETE_ELEMENT',`	if (dbow_ichar(DBOW_OTHER,q,"$1 =",sizeof(q)) < 0 || dbow_i$2(DBOW_DELETE,q,$1,sizeof(q)) < 0)
	return(-1);')dnl
define(`DELETE_ACTION',`
	if (dbow_query(c, q) != 0)
		return(-1);')dnl
define(`DELETE_EPILOG',`
	return(0);
}')dnl
dnl
define(`SEARCH_NEXT',`
struct db_$1 *
db_find$1next(struct db_$1 *p)
{
	dbow_row row;

	if (p->resp == NULL)
		return(NULL);
	if ((row = dbow_fetch_row(p->resp)) == NULL) {
		db_$1free(p);
		return(NULL);
	}
	_dbfill_$1(row, p);
	return(p);
}
define(`HAVE_SEARCH_NEXT_$1')')dnl
define(`SEARCH_PROLOG',`ifdef(`HAVE_SEARCH_NEXT_$1',`',`SEARCH_NEXT($1)')
struct db_$1 *
$2(dbow_conn *c, $3)
{
	struct db_$1 *p = NULL;
	char q[100];
	dbow_row row;

	if ((p = db_$1alloc()) == NULL)
		return(NULL);
	strcpy(q, "SELECT * FROM $1 WHERE ");
')
define(`SEARCH_ELEMENT',`	if (dbow_ichar(DBOW_OTHER,q,"$1 =",sizeof(q)) < 0 || dbow_i$2(DBOW_SEARCH,q,$1,sizeof(q)) < 0)
		return(NULL);')dnl
define(`SEARCH_ACTION',`
	if (dbow_query(c, q) != 0)
		return(NULL);
	if ((p->resp = dbow_store_result(c)) == NULL)
		return(NULL);')dnl
define(`SEARCH_EPILOG',`
	return(db_find$1next(p));
}')dnl
dnl
define(`PROTO_UPDATE',`int $2(dbow_conn *, struct db_$1 *, $3);')dnl
define(`UPDATE_PROLOG',`
int
$2(dbow_conn *c, struct db_$1 *p, $3)
{
	char q[100];
	MYSQL_RES *rsp;

	strcpy(q, "UPDATE $1 SET(')dnl
dnl
define(`DUMP_PROLOG',`
void
$2(struct db_$1 *p, FILE *fp)
{
	fprintf(fp, "Dump of record from table $1:-\n");
	if (p == NULL)
		return;
')dnl
define(`DUMP_ELEMENT',`	dbow_dump$2(fp, p->$1);')dnl
define(`DUMP_EPILOG',`}')dnl
