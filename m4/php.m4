dnl
dnl $Id$
dnl
dnl Copyright (c) 2003, Kalopa Media Limited.  All rights reserved.
dnl
dnl This is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl
dnl It is distributed in the hope that it will be useful, but WITHOUT
dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
dnl or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
dnl License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this product; see the file COPYING.  If not, write to
dnl the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,
dnl USA.
dnl
dnl THIS SOFTWARE IS PROVIDED BY KALOPA MEDIA LIMITED "AS IS" AND ANY
dnl EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
dnl IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL KALOPA MEDIA LIMITED BE
dnl LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
dnl OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
dnl OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
dnl OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
dnl
dnl ABSTRACT
dnl
dnl $Log$
dnl Revision 1.1  2003/10/14 13:00:24  dtynan
dnl Major revision of the DBOW code to use M4 as a back-end instead of
dnl hard-coding the output.
dnl
dnl
define(`LSYNC',`')
define(`M4FILE',`php.m4')
define(`FILE_PROLOG',`define(`FILENAME',`$1')
<?php
/*
 * PHP prolog file - the following information was generated by
 * DBOW, the database object generator.  Do not edit the contents
 * of this file but instead the source file from which it was
 * generated.  Changes to this file will be lost.
 *
 * Source is "FILENAME"
 * Template is "$Id$"
 */
')
define(`FILE_EPILOG',`}
?>')
define(`INCLUDE',`
include "$1"')

define(`STYPE_UNSIGNED',	`unsigned')
define(`STYPE_TINYINT',		`$1')
define(`STYPE_SMALLINT',	`$1')
define(`STYPE_MEDINT',		`$1')
define(`STYPE_INT',		`$1')
define(`STYPE_BIGINT',		`$1')
define(`STYPE_FLOAT',		`$1')
define(`STYPE_DOUBLE',		`$1')
define(`STYPE_NUMERIC',		`$1')
define(`STYPE_DATE',		`$1')
define(`STYPE_TIME',		`$1')
define(`STYPE_DATETIME',	`$1')
define(`STYPE_TSTAMP',		`$1')
define(`STYPE_YEAR',		`$1')
define(`STYPE_CHAR',		`$1')
define(`STYPE_VARCHAR',		`$1')
define(`STYPE_TINYBLOB',	`$1')
define(`STYPE_TINYTEXT',	`$1')
define(`STYPE_BLOB',		`$1')
define(`STYPE_TEXT',		`$1')
define(`STYPE_MEDBLOB',		`$1')
define(`STYPE_MEDTEXT',		`$1')
define(`STYPE_LONGBLOB',	`$1')
define(`STYPE_LONGTEXT',	`$1')
define(`STYPE_ENUM',		`<error>')
define(`STYPE_SET',		`<error>')

define(`FTYPE_TINYINT',		`int')
define(`FTYPE_SMALLINT',	`int')
define(`FTYPE_MEDINT',		`int')
define(`FTYPE_INT',		`int')
define(`FTYPE_BIGINT',		`long')
define(`FTYPE_FLOAT',		`float')
define(`FTYPE_DOUBLE',		`double')
define(`FTYPE_NUMERIC',		`dchar')
define(`FTYPE_DATE',		`date')
define(`FTYPE_TIME',		`date')
define(`FTYPE_DATETIME',	`date')
define(`FTYPE_TSTAMP',		`date')
define(`FTYPE_YEAR',		`int')
define(`FTYPE_CHAR',		`char')
define(`FTYPE_VARCHAR',		`char')
define(`FTYPE_TINYBLOB',	`char')
define(`FTYPE_TINYTEXT',	`char')
define(`FTYPE_BLOB',		`char')
define(`FTYPE_TEXT',		`char')
define(`FTYPE_MEDBLOB',		`char')
define(`FTYPE_MEDTEXT',		`char')
define(`FTYPE_LONGBLOB',	`char')
define(`FTYPE_LONGTEXT',	`char')
define(`FTYPE_ENUM',		`<error>')
define(`FTYPE_SET',		`<error>')

define(`STR_PROLOG',`
/*
 * Class definition for SQL table "$1".
 */
class db_$1 {
	dbow_res *resp;')
define(`STR_ELEMENT',`	var $1;
	function get_$1() { return $$this->$1; }
	function set_$1($$val) { $$this->$1 = $$val; }')
define(`STR_EPILOG',`};')

define(`PROTO_PROLOG',`')
define(`PROTO_INSERT',`')
define(`PROTO_SEARCH',`')
define(`PROTO_DUMP',`')
define(`PROTO_EPILOG',`')

define(`FILL_PROLOG',`
define(`FILL_ELEMENT',`	$$this->$1 = $$s["$1"];')
define(`FILL_EPILOG',`}')

define(`ALLOC_PROLOG',`')
define(`ALLOC_ELEMENT',`')
define(`ALLOC_EPILOG',`')

define(`FREE_PROLOG',`')
define(`FREE_ELEMENT',`')
define(`FREE_EPILOG',`')

define(`INSERT_PROLOG',`
function insert()
{
	global $FALSE;

	if ($r = $conn->doquery("INSERT INTO user VALUES('$this->user_id','$this->fname','$this->lname','$this->a1','$this->a2','$this->a3','$this->city','$this->state_county','$this->postcode_zip','$this->country_id','$this->contact_phone','$this->handle','$this->password')")) {
		if ($this->user_id == 0)
			$this->user_id = mysql_insert_id();
	}
	return $r;
}

define(`INSERT_PROLOG',`
int
$2(dbow_conn *c, struct db_$1 *p)
{
	char q[1024];
	MYSQL_RES *rsp;

	strcpy(q, "INSERT INTO $1 VALUES(");')
define(`INSERT_ELEMENT',`	if (dbow_i$2(DBOW_INSERT,q,p->$1,sizeof(q)) < 0)
		return(-1);')
define(`INSERT_ACTION',`	if (dbow_query(c,q) != 0)
		return(-1);')
define(`INSERT_SETID',`	if (p->$1 == 0)
		p->$1 = dbow_insertid(c);')
define(`INSERT_EPILOG',` return(0);
}')

define(`SEARCH_NEXT',`
struct db_$1 *
db_find$1next(struct db_$1 *p)
{
	dbow_row row;

	if (p->resp == NULL)
		return(NULL);
	if ((row = dbow_fetch_row(p->resp)) == NULL) {
		dbow_free_result(p->resp);
		p->resp = NULL;
		return(NULL);
	}
	_dbfill_$1(row, p);
	return(p);
}
define(`HAVE_SEARCH_NEXT_$1')')
define(`SEARCH_PROLOG',`ifdef(`HAVE_SEARCH_NEXT_$1',`',`SEARCH_NEXT($1)')
struct db_$1 *
$2(dbow_conn *c, $3)
{
	struct db_$1 *p = NULL;
	char q[100];
	dbow_row row;

	strcpy(q, "SELECT * FROM $1 WHERE ");
')
define(`SEARCH_ELEMENT',`	if (dbow_ichar(DBOW_OTHER,q,"$1 = ",sizeof(q)) < 0 || dbow_i$2(DBOW_SEARCH,q,$1,sizeof(q)) < 0)
		return(NULL);')
define(`SEARCH_ACTION',`
	if (dbow_query(c, q) != 0)
		return(NULL);
	if ((p->resp = dbow_store_result(c)) == NULL)
		return(NULL);')
define(`SEARCH_EPILOG',`
	return(db_find$1next(p));
}')

define(`DUMP_PROLOG',`
void
$2(struct db_$1 *p, FILE *fp)
{
	fprintf(fp, "Dump of record from table $1:-\n");
')
define(`DUMP_ELEMENT',`	dbow_dump$2(fp, p->$1);')
define(`DUMP_EPILOG',`}')
<?php
  /*
   * PHP prolog file - the following information was generated by
   * DBOW, the database object generator.  Do not edit the contents
   * of this file but instead the source file from which it was
   * generated.  Changes to this file will be lost.
   */
?>
<?php
  /*
   * PHP prolog file - the following information was generated by
   * DBOW, the database object generator.  Do not edit the contents
   * of this file but instead the source file from which it was
   * generated.  Changes to this file will be lost.
   */
/*
 * $Id$
 *
 * $Log$
 * Revision 1.1  2003/10/14 13:00:24  dtynan
 * Major revision of the DBOW code to use M4 as a back-end instead of
 * hard-coding the output.
 *
 * Revision 1.6  2003/07/30 13:06:38  dtynan
 * Made some changes to the dump routine naming.
 *
 */
function finduniqueaddress($addr)
{
}
class db_user {
	var $user_id;
	var $fname;
	var $lname;
	var $a1;
	var $a2;
	var $a3;
	var $city;
	var $state_county;
	var $postcode_zip;
	var $country_id;
	var $contact_phone;
	var $handle;
	var $password;

function get_user_id() { return $this->user_id; }
function set_user_id($val) { $this->user_id = $val; }
function get_fname() { return $this->fname; }
function set_fname($val) { $this->fname = $val; }
function get_lname() { return $this->lname; }
function set_lname($val) { $this->lname = $val; }
function get_a1() { return $this->a1; }
function set_a1($val) { $this->a1 = $val; }
function get_a2() { return $this->a2; }
function set_a2($val) { $this->a2 = $val; }
function get_a3() { return $this->a3; }
function set_a3($val) { $this->a3 = $val; }
function get_city() { return $this->city; }
function set_city($val) { $this->city = $val; }
function get_state_county() { return $this->state_county; }
function set_state_county($val) { $this->state_county = $val; }
function get_postcode_zip() { return $this->postcode_zip; }
function set_postcode_zip($val) { $this->postcode_zip = $val; }
function get_country_id() { return $this->country_id; }
function set_country_id($val) { $this->country_id = $val; }
function get_contact_phone() { return $this->contact_phone; }
function set_contact_phone($val) { $this->contact_phone = $val; }
function get_handle() { return $this->handle; }
function set_handle($val) { $this->handle = $val; }
function get_password() { return $this->password; }
function set_password($val) { $this->password = $val; }

function setfields($r)
{
	$s = mysql_fetch_array($r);
	$this->user_id = $s["user_id"];
	$this->fname = $s["fname"];
	$this->lname = $s["lname"];
	$this->a1 = $s["a1"];
	$this->a2 = $s["a2"];
	$this->a3 = $s["a3"];
	$this->city = $s["city"];
	$this->state_county = $s["state_county"];
	$this->postcode_zip = $s["postcode_zip"];
	$this->country_id = $s["country_id"];
	$this->contact_phone = $s["contact_phone"];
	$this->handle = $s["handle"];
	$this->password = $s["password"];
}

function insert()
{
	global $FALSE;

	if ($r = $conn->doquery("INSERT INTO user VALUES('$this->user_id','$this->fname','$this->lname','$this->a1','$this->a2','$this->a3','$this->city','$this->state_county','$this->postcode_zip','$this->country_id','$this->contact_phone','$this->handle','$this->password')")) {
		if ($this->user_id == 0)
			$this->user_id = mysql_insert_id();
	}
	return $r;
}

function db_finduserbyuser_id($conn, $user_id)
{
	global $FALSE;

	if ($r = $conn->doquery("SELECT * FROM user WHERE user_id='$user_id'")) {
		$this->setfields($r);
	}
	return $r;
}
}
?>
void
genphpsearch(struct table *tp, struct column *cp, FILE *fp)
{
	fprintf(fp, "\nfunction %s($conn, $%s)\n{\n", cp->sfname, cp->name);
	fprintf(fp, "\tglobal $FALSE;\n\n");
	fprintf(fp, "\tif ($r = $conn->doquery(\"SELECT * FROM ");
	fprintf(fp, "%s WHERE %s='$%s'\")) {\n", tp->name, cp->name, cp->name);
	fprintf(fp, "\t\t$this->setfields($r);\n\t}\n");
	fprintf(fp, "\treturn $r;\n}\n");
}

/*
 *
 */
int
code_php(struct table *tp, FILE *fp)
{
	struct column *cp;

	fprintf(fp, "class %s {\n", tp->pfx);
	for (cp = tp->chead; cp != NULL; cp = cp->next)
		fprintf(fp, "\tvar $%s;\n", cp->name);
	fputc('\n', fp);

	for (cp = tp->chead; cp != NULL; cp = cp->next) {
		fprintf(fp, "function get_%s() { return ", cp->name);
		fprintf(fp, "$this->%s; }\n", cp->name);
		fprintf(fp, "function set_%s($val) { ", cp->name);
		fprintf(fp, "$this->%s = $val; }\n", cp->name);
	}

	fprintf(fp, "\nfunction setfields($r)\n{\n");
	fprintf(fp, "\t$s = mysql_fetch_array($r);\n");
	for (cp = tp->chead; cp != NULL; cp = cp->next)
		fprintf(fp, "\t$this->%s = $s[\"%s\"];\n", cp->name, cp->name);
	fprintf(fp, "}\n");

	fprintf(fp, "\nfunction insert()\n{\n");
	fprintf(fp, "\tglobal $FALSE;\n\n");
	fprintf(fp, "\tif ($r = $conn->doquery(\"INSERT INTO %s ", tp->name);
	fprintf(fp, "VALUES(");
	for (cp = tp->chead; cp != NULL; cp = cp->next) {
		fprintf(fp, "'$this->%s'", cp->name);
		if (cp->next != NULL)
			fputc(',', fp);
	}
	fprintf(fp, ")\")) {\n");
	for (cp = tp->chead; cp != NULL; cp = cp->next) {
		if (cp->flags & FLAG_AUTOINC) {
			fprintf(fp, "\t\tif ($this->%s == 0)\n", cp->name);
			fprintf(fp, "\t\t\t$this->%s = mysql_insert_id();\n",
							cp->name);
			break;
		}
	}
	fprintf(fp, "\t}\n\treturn $r;\n}\n");

	for (cp = tp->chead; cp != NULL; cp = cp->next) {
		if (cp->sfname != NULL)
			genphpsearch(tp, cp, fp);
	}
	fprintf(fp, "}\n");
}
